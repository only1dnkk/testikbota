import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

bot = Bot(
    token='7629383884:AAEzg4h2pdUchmdv8-jJkQ6LvfGnZ0-bpec',
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫–ª–æ–Ω–æ–≤
bow_counts = {}

# –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞
TARGET_GROUP_ID = -1001476569128  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≥—Ä—É–ø–ø—ã @addleanchat

@dp.message(Command('chill'))
async def chill_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    if message.chat.id != TARGET_GROUP_ID:
        return
        
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —á–∏–ª–ª–∏—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in user_states and user_states[user_id]['status'] == 'chilling':
        return
        
    user_states[user_id] = {
        'status': 'chilling',
        'start_time': datetime.now()
    }
    await message.reply("–í—ã –Ω–∞—á–∞–ª–∏ —á–∏–ª–ª–∏—Ç—å! üòé")

@dp.message(Command('tilt'))
async def tilt_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    if message.chat.id != TARGET_GROUP_ID:
        return
        
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–∏–ª—å—Ç—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in user_states and user_states[user_id]['status'] == 'tilting':
        return
        
    user_states[user_id] = {
        'status': 'tilting',
        'start_time': datetime.now()
    }
    await message.reply("–í—ã –Ω–∞—á–∞–ª–∏ —Ç–∏–ª—å—Ç–æ–≤–∞—Ç—å! üò°")

@dp.message(Command('–ø–æ–∫–ª–æ–Ω'))
async def bow_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    if message.chat.id != TARGET_GROUP_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not message.entities or not any(entity.type == 'mention' for entity in message.entities):
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username")
        return

    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∫–ª–∞–Ω—è—é—Ç—Å—è
    mentioned_username = message.text.split()[1]
    if not mentioned_username.startswith('@'):
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username")
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫–ª–æ–Ω–æ–≤
    if mentioned_username not in bow_counts:
        bow_counts[mentioned_username] = 1
    else:
        bow_counts[mentioned_username] += 1

    await message.reply(f"–í—ã –ø–æ–∫–ª–æ–Ω–∏–ª–∏—Å—å {mentioned_username}! üôá")

@dp.message(Command('status'))
async def status_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    if message.chat.id != TARGET_GROUP_ID:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        username = message.reply_to_message.from_user.full_name
        mentioned_username = f"@{message.reply_to_message.from_user.username}" if message.reply_to_message.from_user.username else None
    else:
        user_id = message.from_user.id
        username = message.from_user.full_name
        mentioned_username = f"@{message.from_user.username}" if message.from_user.username else None

    status_text = ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        user_state = user_states[user_id]
        duration = datetime.now() - user_state['start_time']
        hours = int(duration.total_seconds() // 3600)
        minutes = int((duration.total_seconds() % 3600) // 60)
        
        if hours > 0:
            time_str = f"{hours} —á. {minutes} –º–∏–Ω."
        else:
            time_str = f"{minutes} –º–∏–Ω."
            
        if user_state['status'] == 'chilling':
            status_text = f"{username} –≤ —á–∏–ª–ª–µ —É–∂–µ {time_str} üòé\n"
        elif user_state['status'] == 'tilting':
            status_text = f"{username} –≤ —Ç–∏–ª—å—Ç–µ —É–∂–µ {time_str} üò°\n"
    else:
        status_text = f"{username} –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç üòê\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫–ª–æ–Ω–∞—Ö
    if mentioned_username and mentioned_username in bow_counts:
        status_text += f"–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–ª–æ–Ω–∏–ª–∏—Å—å {bow_counts[mentioned_username]} —Ä–∞–∑(–∞) üôá"
    elif mentioned_username:
        status_text += "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∫–ª–∞–Ω—è–ª—Å—è üôá"

    await message.reply(status_text)

async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.set_my_commands([
        types.BotCommand(command="chill", description="–ù–∞—á–∞—Ç—å —á–∏–ª–ª–∏—Ç—å"),
        types.BotCommand(command="tilt", description="–ù–∞—á–∞—Ç—å —Ç–∏–ª—å—Ç–æ–≤–∞—Ç—å"),
        types.BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
        types.BotCommand(command="poklon", description="–ü–æ–∫–ª–æ–Ω–∏—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    ])
    
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == '__main__':
    try:
        asyncio.run(main())
    finally:
        # Ensure proper cleanup
        if not bot.session.closed:
            asyncio.run(bot.session.close())
